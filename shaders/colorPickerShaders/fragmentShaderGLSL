precision mediump float;
varying vec2 vertex_position;
uniform float current_hue;
uniform vec2 current_color_position;

vec2 ccp = vec2(current_color_position.x,-current_color_position.y);

float hue(float x){
return (x+1.0)*3.0/2.0;
}

vec3 getColor(float hue){
float second = fract(hue);
float first = 1.0-fract(hue);

if(floor(hue)==0.0){
return normalize(vec3(first,second,0.0));
}
if(floor(hue)==1.0){
return normalize(vec3(0.0,first,second));
}
if(floor(hue)==2.0){
return normalize(vec3(second,0.0,first));
}
}

void main()
{
float first = (-vertex_position.x/2.0)+0.5;
float second = (vertex_position.x/2.0)+0.5;
vec3 hue_color = getColor(hue(current_hue));
vec3 white = vec3(1.0,1.0,1.0);
vec3 saturened_color = first*white+second*hue_color;
vec3 color = saturened_color*(vertex_position.y/2.0+0.5);

if(((vertex_position.x>(ccp.x-0.025))&&(vertex_position.x<(ccp.x+0.025))&&(vertex_position.y>(ccp.y-0.025))&&(vertex_position.y<(ccp.y+0.025)))&&(!((vertex_position.x>(ccp.x-0.020))&&(vertex_position.x<(ccp.x+0.020))&&(vertex_position.y>(ccp.y-0.020))&&(vertex_position.y<(ccp.y+0.020))))){
color = white;
}

  gl_FragColor = vec4(color,1.0);
}
